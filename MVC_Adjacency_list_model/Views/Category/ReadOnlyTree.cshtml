@model List<MVC_Adjacency_list_model.ViewModels.NestedCategoriesViewModel>
@{
    ViewBag.Title = "Tree";
}

@helper TreeView(List<MVC_Adjacency_list_model.ViewModels.NestedCategoriesViewModel> categoryTree, int depth)
{
    string typeClass = null;
    if (categoryTree.Count() > 0)
    {
        depth++;
        @:<ul>
            foreach (var item in categoryTree)
            {
                //jeśli jest liściem
                if (item.deeperList.Count == 0)
                {
                    typeClass = "leaf";
                }
                else
                {
                    typeClass = "node";
                }
                <li class="@typeClass" order="database" data-my-content="@item.Name" data-my-level="@depth">
                    @item.Name@DetailedMenu(item)
                    @TreeView(item.deeperList, depth)
                </li>
            }
        @:</ul>
    }

}

@helper DetailedMenu(MVC_Adjacency_list_model.ViewModels.NestedCategoriesViewModel item)
{
    <div style="display: inline-block;" class="display-menu">
        @if (item.deeperList.Count > 1)
        {
            <a class="small-font sortButton" title="sort"><span class="glyphicon glyphicon-sort"></span></a>
        }
    </div>
}

<h2>Here is your DB structure as a tree!</h2>
<hr />

<div id="menu" order="random">
    <a title="Toggle" id="toggleAllButton">
       <span class="glyphicon glyphicon-eye-open"></span>
    </a>

    <a title="Sort All" id="sortAllButton">
        <span class="glyphicon glyphicon-sort"></span>
    </a>
</div>

<div id="listDiv">
    @TreeView(Model, 0)
</div>




@section scripts
{
    @Scripts.Render("~/bundles/TreeScripts")
}
